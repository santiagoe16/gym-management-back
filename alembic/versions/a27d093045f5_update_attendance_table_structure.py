"""update_attendance_table_structure

Revision ID: a27d093045f5
Revises: e93698f4f811
Create Date: 2025-08-01 23:37:12.152484

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql


# revision identifiers, used by Alembic.
revision = 'a27d093045f5'
down_revision = 'e93698f4f811'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if columns exist before adding them
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    columns = [col['name'] for col in inspector.get_columns('attendance')]
    
    # Add recorded_by_id column if it doesn't exist
    if 'recorded_by_id' not in columns:
        op.add_column('attendance', sa.Column('recorded_by_id', sa.Integer(), nullable=True))
        op.create_foreign_key('fk_attendance_recorded_by', 'attendance', 'users', ['recorded_by_id'], ['id'])
    
    # Add notes column if it doesn't exist
    if 'notes' not in columns:
        op.add_column('attendance', sa.Column('notes', sa.String(length=500), nullable=True))
    
    # Add created_at column if it doesn't exist
    if 'created_at' not in columns:
        op.add_column('attendance', sa.Column('created_at', sa.DateTime(timezone=True), nullable=True))
        op.execute("UPDATE attendance SET created_at = NOW() WHERE created_at IS NULL")
        op.alter_column('attendance', 'created_at', nullable=False)
    
    # Add updated_at column if it doesn't exist
    if 'updated_at' not in columns:
        op.add_column('attendance', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
        op.execute("UPDATE attendance SET updated_at = NOW() WHERE updated_at IS NULL")
        op.alter_column('attendance', 'updated_at', nullable=False)
    
    # Update existing records to set default values for recorded_by_id if it was just added
    if 'recorded_by_id' not in columns:
        op.execute("UPDATE attendance SET recorded_by_id = user_id WHERE recorded_by_id IS NULL")
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if columns exist before removing them
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    columns = [col['name'] for col in inspector.get_columns('attendance')]
    
    # Remove foreign key constraint if it exists
    try:
        op.drop_constraint('fk_attendance_recorded_by', 'attendance', type_='foreignkey')
    except:
        pass  # Constraint might not exist
    
    # Remove columns if they exist
    if 'updated_at' in columns:
        op.drop_column('attendance', 'updated_at')
    if 'created_at' in columns:
        op.drop_column('attendance', 'created_at')
    if 'notes' in columns:
        op.drop_column('attendance', 'notes')
    if 'recorded_by_id' in columns:
        op.drop_column('attendance', 'recorded_by_id')
    
    # ### end Alembic commands ### 