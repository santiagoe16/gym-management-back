"""fix_attendance_table_structure

Revision ID: f73bfd2551f0
Revises: a27d093045f5
Create Date: 2025-08-01 23:55:06.199578

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'f73bfd2551f0'
down_revision = 'a27d093045f5'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if columns exist before adding them
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    columns = [col['name'] for col in inspector.get_columns('attendance')]
    
    # Add gym_id column if it doesn't exist
    if 'gym_id' not in columns:
        op.add_column('attendance', sa.Column('gym_id', sa.Integer(), nullable=True))
        op.create_foreign_key('fk_attendance_gym', 'attendance', 'gyms', ['gym_id'], ['id'])
    
    # Remove attendance_date column if it exists (not needed in new model)
    if 'attendance_date' in columns:
        op.drop_column('attendance', 'attendance_date')
    
    # Remove check_out_time column if it exists (not needed in new model)
    if 'check_out_time' in columns:
        op.drop_column('attendance', 'check_out_time')
    
    # Add check_in_time column if it doesn't exist
    if 'check_in_time' not in columns:
        op.add_column('attendance', sa.Column('check_in_time', sa.DateTime(), nullable=True))
        op.execute("UPDATE attendance SET check_in_time = NOW() WHERE check_in_time IS NULL")
    
    # Update existing records to set gym_id based on user's gym
    if 'gym_id' not in columns:
        op.execute("""
            UPDATE attendance a 
            JOIN users u ON a.user_id = u.id 
            SET a.gym_id = u.gym_id 
            WHERE a.gym_id IS NULL
        """)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if columns exist before removing them
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    columns = [col['name'] for col in inspector.get_columns('attendance')]
    
    # Remove foreign key constraint if it exists
    try:
        op.drop_constraint('fk_attendance_gym', 'attendance', type_='foreignkey')
    except:
        pass  # Constraint might not exist
    
    # Remove gym_id column if it exists
    if 'gym_id' in columns:
        op.drop_column('attendance', 'gym_id')
    
    # Add back the old columns (if needed for downgrade)
    if 'attendance_date' not in columns:
        op.add_column('attendance', sa.Column('attendance_date', sa.Date(), nullable=True))
    
    if 'check_out_time' not in columns:
        op.add_column('attendance', sa.Column('check_out_time', sa.DateTime(), nullable=True))
    
    # ### end Alembic commands ### 